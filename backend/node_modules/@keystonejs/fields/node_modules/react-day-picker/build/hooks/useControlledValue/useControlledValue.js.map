{"version":3,"file":"useControlledValue.js","sources":["../../../src/hooks/useControlledValue/useControlledValue.ts"],"sourcesContent":["import React from 'react';\n\nexport type DispatchStateAction<T> = React.Dispatch<React.SetStateAction<T>>;\n\n/**\n * Helper hook for using controlled/uncontrolled values from a component props.\n *\n * When the value is not controlled, pass `undefined` as `controlledValue` and\n * use the returned setter to update it.\n *\n * When the value is controlled, pass the controlled value as second\n * argument, which will be always returned as `value`.\n */\nexport function useControlledValue<T>(\n  defaultValue: T,\n  controlledValue: T | undefined\n): [T, DispatchStateAction<T>] {\n  const [uncontrolledValue, setValue] = React.useState(defaultValue);\n\n  const value =\n    controlledValue === undefined ? uncontrolledValue : controlledValue;\n\n  return [value, setValue] as [T, DispatchStateAction<T>];\n}\n"],"names":[],"mappings":";;AAIA;;;;;;;;;SASgB,kBAAkB,CAChC,YAAe,EACf,eAA8B;IAExB,IAAA,KAAgC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,EAA3D,iBAAiB,QAAA,EAAE,QAAQ,QAAgC,CAAC;IAEnE,IAAM,KAAK,GACT,eAAe,KAAK,SAAS,GAAG,iBAAiB,GAAG,eAAe,CAAC;IAEtE,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAgC,CAAC;AAC1D;;;;"}