import { __assign } from '../../_virtual/_tslib.js';
import { useDayPicker } from '../../contexts/DayPicker/useDayPicker.js';
import '../../contexts/DayPicker/DayPickerContext.js';
import '../../contexts/SelectMultiple/SelectMultipleContext.js';
import { useSelectMultiple } from '../../contexts/SelectMultiple/useSelectMultiple.js';
import '../../contexts/SelectRange/SelectRangeContext.js';
import { useSelectRange } from '../../contexts/SelectRange/useSelectRange.js';
import '../../contexts/SelectSingle/SelectSingleContext.js';
import { useSelectSingle } from '../../contexts/SelectSingle/useSelectSingle.js';
import { isDayPickerMultiple } from '../../types/DayPickerMultiple.js';
import { isDayPickerRange } from '../../types/DayPickerRange.js';
import { isDayPickerSingle } from '../../types/DayPickerSingle.js';
import { getModifierStatus } from './utils/getModifierStatus.js';

/** Return the modifiers and its styles for the specified date. */
function useModifiers(date) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    var context = useDayPicker();
    var singleSelect = useSelectSingle();
    var multipleSelect = useSelectMultiple();
    var rangeSelect = useSelectRange();
    // TODO: modifiers from context should not be overridden
    var modifiers = __assign(__assign({}, context.modifiers), { today: (_a = context.modifiers.today) !== null && _a !== void 0 ? _a : [context.today], disabled: context.modifiers.disabled });
    if (isDayPickerSingle(context)) {
        modifiers.selected = modifiers.selected.concat((_b = singleSelect.modifiers.selected) !== null && _b !== void 0 ? _b : []);
    }
    else if (isDayPickerMultiple(context)) {
        modifiers.selected = modifiers.selected.concat((_c = multipleSelect.modifiers.selected) !== null && _c !== void 0 ? _c : []);
        modifiers.disabled = modifiers.disabled.concat((_d = multipleSelect.modifiers.disabled) !== null && _d !== void 0 ? _d : []);
    }
    else if (isDayPickerRange(context)) {
        modifiers.selected = modifiers.selected.concat((_e = rangeSelect.modifiers.selected) !== null && _e !== void 0 ? _e : []);
        modifiers.disabled = modifiers.disabled.concat((_f = rangeSelect.modifiers.disabled) !== null && _f !== void 0 ? _f : []);
        modifiers.range_start = (_g = rangeSelect.modifiers.range_start) !== null && _g !== void 0 ? _g : [];
        modifiers.range_middle = (_h = rangeSelect.modifiers.range_middle) !== null && _h !== void 0 ? _h : [];
        modifiers.range_end = (_j = rangeSelect.modifiers.range_end) !== null && _j !== void 0 ? _j : [];
    }
    var status = getModifierStatus(date, modifiers);
    var modifierClassNames = [];
    Object.keys(status)
        .filter(function (modifier) { return Boolean(status[modifier]); })
        .forEach(function (modifier) {
        var customClassName = context.modifierClassNames[modifier];
        if (customClassName) {
            modifierClassNames.push(customClassName);
        }
        else {
            modifierClassNames.push("" + context.modifierPrefix + modifier);
        }
    });
    var modifierStyle = {};
    if (context.modifierStyles) {
        Object.keys(status).forEach(function (modifier) {
            var _a;
            modifierStyle = __assign(__assign({}, modifierStyle), (_a = context.modifierStyles) === null || _a === void 0 ? void 0 : _a[modifier]);
        });
    }
    return {
        modifiers: status,
        modifierClassNames: modifierClassNames,
        modifierStyle: modifierStyle
    };
}

export { useModifiers };
//# sourceMappingURL=useModifiers.js.map
