import React from 'react';
import { isSameDay } from 'date-fns';
import { useDayPicker } from '../../../contexts/DayPicker/useDayPicker.js';
import '../../../contexts/DayPicker/DayPickerContext.js';
import '../../../contexts/Focus/FocusContext.js';
import { useFocus } from '../../../contexts/Focus/useFocus.js';

/** Handle the focus for the day element. */
function useDayFocus(date, buttonRef) {
    var _a = useFocus(), focusedDay = _a[0], _b = _a[1], focusDayAfter = _b.focusDayAfter, focusDayBefore = _b.focusDayBefore, focusWeekAfterDay = _b.focusWeekAfterDay, focusWeekBeforeDay = _b.focusWeekBeforeDay, blur = _b.blur, focus = _b.focus, focusMonthBefore = _b.focusMonthBefore, focusMonthAfter = _b.focusMonthAfter, focusYearBefore = _b.focusYearBefore, focusYearAfter = _b.focusYearAfter, focusStartOfWeek = _b.focusStartOfWeek, focusEndOfWeek = _b.focusEndOfWeek;
    var dir = useDayPicker().dir;
    // Focus the HTML element if this is the focused day.
    React.useEffect(function () {
        var _a;
        if (!focusedDay)
            return;
        if (isSameDay(focusedDay, date)) {
            (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }, [focusedDay, date, buttonRef]);
    var focusOnKeyDown = function (e) {
        switch (e.key) {
            case 'ArrowLeft':
                e.preventDefault();
                e.stopPropagation();
                dir === 'rtl' ? focusDayAfter() : focusDayBefore();
                break;
            case 'ArrowRight':
                e.preventDefault();
                e.stopPropagation();
                dir === 'rtl' ? focusDayBefore() : focusDayAfter();
                break;
            case 'ArrowDown':
                e.preventDefault();
                e.stopPropagation();
                focusWeekAfterDay();
                break;
            case 'ArrowUp':
                e.preventDefault();
                e.stopPropagation();
                focusWeekBeforeDay();
                break;
            case 'PageUp':
                e.preventDefault();
                e.stopPropagation();
                e.shiftKey ? focusYearBefore() : focusMonthBefore();
                break;
            case 'PageDown':
                e.preventDefault();
                e.stopPropagation();
                e.shiftKey ? focusYearAfter() : focusMonthAfter();
                break;
            case 'Home':
                e.preventDefault();
                e.stopPropagation();
                focusStartOfWeek();
                break;
            case 'End':
                e.preventDefault();
                e.stopPropagation();
                focusEndOfWeek();
                break;
        }
    };
    var isFocused = Boolean(focusedDay && !isSameDay(focusedDay, date));
    return { focus: focus, blur: blur, focusOnKeyDown: focusOnKeyDown, isFocused: isFocused };
}

export { useDayFocus };
//# sourceMappingURL=useDayFocus.js.map
