{"version":3,"file":"MonthsDropdown.js","sources":["../../../src/components/MonthsDropdown/MonthsDropdown.tsx"],"sourcesContent":["import React from 'react';\n\nimport { isSameYear, setMonth as setDateMonth, startOfMonth } from 'date-fns';\n\nimport { useDayPicker } from '../../contexts/DayPicker';\nimport { MonthChangeEventHandler } from '../../types/EventHandlers';\n\n/** The props for the [[MonthsDropdown]] component. */\nexport interface MonthsDropdownProps {\n  /** The month where the dropdown is displayed. */\n  displayMonth: Date;\n  onChange: MonthChangeEventHandler;\n}\n\n/**\n * Render the dropdown to navigate between months.\n */\nexport function MonthsDropdown(props: MonthsDropdownProps): JSX.Element {\n  const { displayMonth } = props;\n\n  const {\n    fromDate,\n    toDate,\n    styles,\n    locale,\n    formatters: { formatMonthCaption },\n    classNames,\n    components: { Dropdown },\n    labels: { labelMonthDropdown }\n  } = useDayPicker();\n\n  if (!fromDate && !toDate) {\n    // TODO: use type guards\n    return <></>;\n  }\n  const dropdownMonths: Date[] = [];\n\n  if (fromDate && toDate) {\n    if (isSameYear(fromDate, toDate)) {\n      // only display the months included in the range\n      for (\n        let month = fromDate.getMonth();\n        month <= toDate.getMonth();\n        month++\n      ) {\n        dropdownMonths.push(setDateMonth(startOfMonth(fromDate), month));\n      }\n    } else {\n      // display all the 12 months\n      for (let month = 0; month <= 11; month++) {\n        const anyDate = new Date(); // any date is OK, we just need the year\n        dropdownMonths.push(setDateMonth(startOfMonth(anyDate), month));\n      }\n    }\n  }\n\n  const handleChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {\n    const newMonth = setDateMonth(\n      new Date(displayMonth),\n      Number(e.target.value)\n    );\n    props.onChange(newMonth);\n  };\n\n  return (\n    <Dropdown\n      aria-label={labelMonthDropdown()}\n      className={classNames.dropdown_month}\n      style={styles.dropdown_month}\n      onChange={handleChange}\n      value={displayMonth.getMonth()}\n      caption={formatMonthCaption(displayMonth, { locale })}\n    >\n      {dropdownMonths.map((m) => (\n        <option key={m.getMonth()} value={m.getMonth()}>\n          {formatMonthCaption(m, { locale })}\n        </option>\n      ))}\n    </Dropdown>\n  );\n}\n"],"names":["setDateMonth"],"mappings":";;;;;AAcA;;;SAGgB,cAAc,CAAC,KAA0B;IAC/C,IAAA,YAAY,GAAK,KAAK,aAAV,CAAW;IAEzB,IAAA,KASF,YAAY,EAAE,EARhB,QAAQ,cAAA,EACR,MAAM,YAAA,EACN,MAAM,YAAA,EACN,MAAM,YAAA,EACQ,kBAAkB,mCAAA,EAChC,UAAU,gBAAA,EACI,QAAQ,yBAAA,EACZ,kBAAkB,+BACZ,CAAC;IAEnB,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAE;;QAExB,OAAO,yCAAK,CAAC;KACd;IACD,IAAM,cAAc,GAAW,EAAE,CAAC;IAElC,IAAI,QAAQ,IAAI,MAAM,EAAE;QACtB,IAAI,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;;YAEhC,KACE,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,EAC/B,KAAK,IAAI,MAAM,CAAC,QAAQ,EAAE,EAC1B,KAAK,EAAE,EACP;gBACA,cAAc,CAAC,IAAI,CAACA,QAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aAClE;SACF;aAAM;;YAEL,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE;gBACxC,IAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC3B,cAAc,CAAC,IAAI,CAACA,QAAY,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aACjE;SACF;KACF;IAED,IAAM,YAAY,GAAgD,UAAC,CAAC;QAClE,IAAM,QAAQ,GAAGA,QAAY,CAC3B,IAAI,IAAI,CAAC,YAAY,CAAC,EACtB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CACvB,CAAC;QACF,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC1B,CAAC;IAEF,QACE,oBAAC,QAAQ,kBACK,kBAAkB,EAAE,EAChC,SAAS,EAAE,UAAU,CAAC,cAAc,EACpC,KAAK,EAAE,MAAM,CAAC,cAAc,EAC5B,QAAQ,EAAE,YAAY,EACtB,KAAK,EAAE,YAAY,CAAC,QAAQ,EAAE,EAC9B,OAAO,EAAE,kBAAkB,CAAC,YAAY,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC,IAEpD,cAAc,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,QACzB,gCAAQ,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAE,IAC3C,kBAAkB,CAAC,CAAC,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC,CAC3B,IACV,CAAC,CACO,EACX;AACJ;;;;"}