import React from 'react';
import { isSameMonth } from 'date-fns';
import { useDayPicker } from '../../contexts/DayPicker/useDayPicker.js';
import '../../contexts/DayPicker/DayPickerContext.js';
import '../../contexts/Navigation/NavigationContext.js';
import { useNavigation } from '../../contexts/Navigation/useNavigation.js';
import { MonthsDropdown } from '../MonthsDropdown/MonthsDropdown.js';
import { Navigation } from '../Navigation/Navigation.js';
import { YearsDropdown } from '../YearsDropdown/YearsDropdown.js';

/**
 * Render the caption of a month, which includes title and navigation buttons.
 * The caption has a different layout when setting the `numberOfMonths` prop.
 */
function Caption(props) {
    var _a;
    var displayMonth = props.displayMonth;
    var context = useDayPicker();
    var classNames = context.classNames, numberOfMonths = context.numberOfMonths, disableNavigation = context.disableNavigation, styles = context.styles, captionLayout = context.captionLayout, onMonthChange = context.onMonthChange, dir = context.dir, CaptionLabel = context.components.CaptionLabel;
    var _b = useNavigation(), previousMonth = _b.previousMonth, nextMonth = _b.nextMonth, goToMonth = _b.goToMonth, displayMonths = _b.displayMonths;
    var handlePreviousClick = function () {
        if (!previousMonth)
            return;
        goToMonth(previousMonth);
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(previousMonth);
    };
    var handleNextClick = function () {
        if (!nextMonth)
            return;
        goToMonth(nextMonth);
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(nextMonth);
    };
    var handleMonthChange = function (newMonth) {
        goToMonth(newMonth);
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(newMonth);
    };
    var displayIndex = displayMonths.findIndex(function (month) {
        return isSameMonth(displayMonth, month);
    });
    var isFirst = displayIndex === 0;
    var isLast = displayIndex === displayMonths.length - 1;
    if (dir === 'rtl') {
        _a = [isFirst, isLast], isLast = _a[0], isFirst = _a[1];
    }
    var captionLabel = React.createElement(CaptionLabel, { displayMonth: displayMonth });
    var hideNext = numberOfMonths > 1 && (isFirst || !isLast);
    var hidePrevious = numberOfMonths > 1 && (isLast || !isFirst);
    return (React.createElement("div", { className: classNames.caption, style: styles.caption },
        disableNavigation && captionLabel,
        !disableNavigation && (React.createElement(React.Fragment, null, captionLayout === 'dropdown' ? (React.createElement("div", { className: classNames.caption_dropdowns, style: styles.caption_dropdowns },
            React.createElement(MonthsDropdown, { onChange: handleMonthChange, displayMonth: displayMonth }),
            React.createElement(YearsDropdown, { onChange: handleMonthChange, displayMonth: displayMonth }))) : (React.createElement(React.Fragment, null,
            React.createElement(CaptionLabel, { displayMonth: displayMonth }),
            React.createElement(Navigation, { displayMonth: displayMonth, hideNext: hideNext, hidePrevious: hidePrevious, nextMonth: nextMonth, previousMonth: previousMonth, onPreviousClick: handlePreviousClick, onNextClick: handleNextClick })))))));
}

export { Caption };
//# sourceMappingURL=Caption.js.map
