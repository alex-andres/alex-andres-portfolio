{"version":3,"file":"SelectSingleContext.js","sources":["../../../src/contexts/SelectSingle/SelectSingleContext.tsx"],"sourcesContent":["import React from 'react';\n\nimport { DayPickerProps } from '../../types/DayPicker';\nimport {\n  DayPickerSingleProps,\n  isDayPickerSingle\n} from '../../types/DayPickerSingle';\nimport { DayClickEventHandler } from '../../types/EventHandlers';\nimport { Modifiers } from '../../types/Modifiers';\n\n/** Represent the modifiers that are changed by the single selection. */\nexport type SelectSingleModifiers = Pick<Modifiers, 'selected'>;\n\n/** Represents the value of a [[SelectSingleContext]]. */\nexport interface SelectSingleContextValue {\n  /** The day that has been selected. */\n  selected: Date | undefined;\n  /** The modifiers for the corresponding selection. */\n  modifiers: SelectSingleModifiers;\n  /** Event handler to attach to the day button to enable the single select. */\n  onDayClick?: DayClickEventHandler;\n}\n\n/**\n * The SelectSingle context shares details about the selected days when in\n * single selection mode.\n *\n * Access this context from the [[useSelectSingle]] hook.\n */\nexport const SelectSingleContext = React.createContext<\n  SelectSingleContextValue | undefined\n>(undefined);\n\ntype SelectSingleProviderProps = {\n  initialProps: DayPickerProps;\n  children: React.ReactNode;\n};\n\n/** Provides the values for the [[SelectSingleProvider]]. */\nexport function SelectSingleProvider(\n  props: SelectSingleProviderProps\n): JSX.Element {\n  if (!isDayPickerSingle(props.initialProps)) {\n    const emptyContextValue: SelectSingleContextValue = {\n      selected: undefined,\n      modifiers: { selected: [] }\n    };\n    return (\n      <SelectSingleContext.Provider value={emptyContextValue}>\n        {props.children}\n      </SelectSingleContext.Provider>\n    );\n  }\n  return (\n    <SelectSingleProviderInternal\n      initialProps={props.initialProps}\n      children={props.children}\n    />\n  );\n}\n\ntype SelectSingleProviderInternal = {\n  initialProps: DayPickerSingleProps;\n  children: React.ReactNode;\n};\n\nexport function SelectSingleProviderInternal({\n  initialProps,\n  children\n}: SelectSingleProviderInternal): JSX.Element {\n  const onDayClick: DayClickEventHandler = (day, dayModifiers, e) => {\n    if (dayModifiers.selected && !initialProps.required) {\n      initialProps.onSelect?.(undefined, day, dayModifiers, e);\n      return;\n    }\n    initialProps.onSelect?.(day, day, dayModifiers, e);\n  };\n\n  const modifiers: SelectSingleModifiers = { selected: [] };\n\n  if (initialProps.selected) {\n    modifiers.selected = [initialProps.selected];\n  }\n\n  const contextValue: SelectSingleContextValue = {\n    selected: initialProps.selected,\n    onDayClick,\n    modifiers\n  };\n  return (\n    <SelectSingleContext.Provider value={contextValue}>\n      {children}\n    </SelectSingleContext.Provider>\n  );\n}\n"],"names":[],"mappings":";;;AAuBA;;;;;;IAMa,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAEpD,SAAS,EAAE;AAOb;SACgB,oBAAoB,CAClC,KAAgC;IAEhC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;QAC1C,IAAM,iBAAiB,GAA6B;YAClD,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;SAC5B,CAAC;QACF,QACE,oBAAC,mBAAmB,CAAC,QAAQ,IAAC,KAAK,EAAE,iBAAiB,IACnD,KAAK,CAAC,QAAQ,CACc,EAC/B;KACH;IACD,QACE,oBAAC,4BAA4B,IAC3B,YAAY,EAAE,KAAK,CAAC,YAAY,EAChC,QAAQ,EAAE,KAAK,CAAC,QAAQ,GACxB,EACF;AACJ,CAAC;SAOe,4BAA4B,CAAC,EAGd;QAF7B,YAAY,kBAAA,EACZ,QAAQ,cAAA;IAER,IAAM,UAAU,GAAyB,UAAC,GAAG,EAAE,YAAY,EAAE,CAAC;;QAC5D,IAAI,YAAY,CAAC,QAAQ,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YACnD,MAAA,YAAY,CAAC,QAAQ,+CAArB,YAAY,EAAY,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;YACzD,OAAO;SACR;QACD,MAAA,YAAY,CAAC,QAAQ,+CAArB,YAAY,EAAY,GAAG,EAAE,GAAG,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;KACpD,CAAC;IAEF,IAAM,SAAS,GAA0B,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IAE1D,IAAI,YAAY,CAAC,QAAQ,EAAE;QACzB,SAAS,CAAC,QAAQ,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;KAC9C;IAED,IAAM,YAAY,GAA6B;QAC7C,QAAQ,EAAE,YAAY,CAAC,QAAQ;QAC/B,UAAU,YAAA;QACV,SAAS,WAAA;KACV,CAAC;IACF,QACE,oBAAC,mBAAmB,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,IAC9C,QAAQ,CACoB,EAC/B;AACJ;;;;"}