import React from 'react';
import { differenceInCalendarDays, isBefore, isAfter } from 'date-fns';
import { isDayPickerRange } from '../../types/DayPickerRange.js';
import { addToRange } from './utils/addToRange.js';

/**
 * The SelectRange context shares details about the selected days when in
 * range selection mode.
 *
 * Access this context from the [[useSelectRange]] hook.
 */
var SelectRangeContext = React.createContext(undefined);
/** Provides the values for the [[SelectRangeProvider]]. */
function SelectRangeProvider(props) {
    if (!isDayPickerRange(props.initialProps)) {
        var emptyContextValue = {
            selected: undefined,
            modifiers: {
                selected: [],
                range_start: [],
                range_end: [],
                range_middle: [],
                disabled: []
            }
        };
        return (React.createElement(SelectRangeContext.Provider, { value: emptyContextValue }, props.children));
    }
    return (React.createElement(SelectRangeProviderInternal, { initialProps: props.initialProps, children: props.children }));
}
function SelectRangeProviderInternal(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var selected = initialProps.selected;
    var min = initialProps.min;
    var max = initialProps.max;
    var onDayClick = function (day, modifiers, e) {
        var _a, _b;
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, modifiers, e);
        var newValue = addToRange(day, selected);
        if ((min || max) &&
            selected &&
            (newValue === null || newValue === void 0 ? void 0 : newValue.to) &&
            newValue.from &&
            newValue.from !== newValue.to) {
            var diff = Math.abs(differenceInCalendarDays(newValue === null || newValue === void 0 ? void 0 : newValue.to, newValue === null || newValue === void 0 ? void 0 : newValue.from));
            if (min && diff < min) {
                return;
            }
            if (max && diff >= max) {
                return;
            }
        }
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, newValue, day, modifiers, e);
    };
    var modifiers = {
        selected: [],
        range_start: [],
        range_end: [],
        range_middle: [],
        disabled: []
    };
    if (selected) {
        modifiers.selected = [selected];
        if (selected.from) {
            modifiers.range_start = [selected.from];
            if (selected.to) {
                modifiers.range_middle = [
                    {
                        after: selected.from,
                        before: selected.to
                    }
                ];
                if (max || min) {
                    modifiers.disabled = [
                        function (date) {
                            if (max &&
                                selected.to &&
                                selected.from &&
                                isBefore(date, selected.from)) {
                                var diff = differenceInCalendarDays(selected.to, date);
                                if (diff >= max) {
                                    return true;
                                }
                            }
                            if (max &&
                                selected.to &&
                                selected.from &&
                                isAfter(date, selected.to)) {
                                var diff = differenceInCalendarDays(date, selected.from);
                                if (diff >= max) {
                                    return true;
                                }
                            }
                            if (min && selected.from && isBefore(date, selected.from)) {
                                var diff = differenceInCalendarDays(selected.from, date);
                                if (diff < min) {
                                    return true;
                                }
                            }
                            if (min &&
                                selected.to &&
                                selected.from &&
                                isAfter(date, selected.to)) {
                                var diff = differenceInCalendarDays(date, selected.from);
                                if (diff < min) {
                                    return true;
                                }
                            }
                            return false;
                        }
                    ];
                }
                modifiers.range_end = [selected.to];
            }
            else {
                modifiers.range_end = [selected.from];
            }
        }
    }
    return (React.createElement(SelectRangeContext.Provider, { value: { selected: selected, onDayClick: onDayClick, modifiers: modifiers } }, children));
}

export { SelectRangeContext, SelectRangeProvider, SelectRangeProviderInternal };
//# sourceMappingURL=SelectRangeContext.js.map
