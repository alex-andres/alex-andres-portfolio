import React from 'react';
import { isDayPickerSingle } from '../../types/DayPickerSingle.js';

/**
 * The SelectSingle context shares details about the selected days when in
 * single selection mode.
 *
 * Access this context from the [[useSelectSingle]] hook.
 */
var SelectSingleContext = React.createContext(undefined);
/** Provides the values for the [[SelectSingleProvider]]. */
function SelectSingleProvider(props) {
    if (!isDayPickerSingle(props.initialProps)) {
        var emptyContextValue = {
            selected: undefined,
            modifiers: { selected: [] }
        };
        return (React.createElement(SelectSingleContext.Provider, { value: emptyContextValue }, props.children));
    }
    return (React.createElement(SelectSingleProviderInternal, { initialProps: props.initialProps, children: props.children }));
}
function SelectSingleProviderInternal(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var onDayClick = function (day, dayModifiers, e) {
        var _a, _b;
        if (dayModifiers.selected && !initialProps.required) {
            (_a = initialProps.onSelect) === null || _a === void 0 ? void 0 : _a.call(initialProps, undefined, day, dayModifiers, e);
            return;
        }
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, day, day, dayModifiers, e);
    };
    var modifiers = { selected: [] };
    if (initialProps.selected) {
        modifiers.selected = [initialProps.selected];
    }
    var contextValue = {
        selected: initialProps.selected,
        onDayClick: onDayClick,
        modifiers: modifiers
    };
    return (React.createElement(SelectSingleContext.Provider, { value: contextValue }, children));
}

export { SelectSingleContext, SelectSingleProvider, SelectSingleProviderInternal };
//# sourceMappingURL=SelectSingleContext.js.map
