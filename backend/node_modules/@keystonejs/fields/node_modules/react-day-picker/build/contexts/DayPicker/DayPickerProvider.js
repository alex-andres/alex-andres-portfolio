import { __rest, __assign } from '../../_virtual/_tslib.js';
import React from 'react';
import enUS from 'date-fns/locale/en-US';
import { Caption } from '../../components/Caption/Caption.js';
import { CaptionLabel } from '../../components/CaptionLabel/CaptionLabel.js';
import { Day } from '../../components/Day/Day.js';
import 'date-fns';
import { DayPickerContext } from './DayPickerContext.js';
import '../SelectMultiple/SelectMultipleContext.js';
import '../SelectRange/SelectRangeContext.js';
import '../SelectSingle/SelectSingleContext.js';
import '../Focus/FocusContext.js';
import { DayContent } from '../../components/DayContent/DayContent.js';
import { Dropdown } from '../../components/Dropdown/Dropdown.js';
import { Footer } from '../../components/Footer/Footer.js';
import { Head } from '../../components/Head/Head.js';
import { IconDropdown } from '../../components/IconDropdown/IconDropdown.js';
import { IconLeft } from '../../components/IconLeft/IconLeft.js';
import { IconRight } from '../../components/IconRight/IconRight.js';
import { Row } from '../../components/Row/Row.js';
import { WeekNumber } from '../../components/WeekNumber/WeekNumber.js';
import { defaultClassNames } from './defaultClassNames.js';
import * as index from './formatters/index.js';
import * as index$1 from './labels/index.js';
import { parseFromToProps } from './utils/parseFromToProps.js';
import { parseModifierProps } from './utils/parseModifierProps.js';

/**
 * The provider for the [[DayPickerContext]].
 */
function DayPickerProvider(props) {
    var _a, _b, _c, _d, _e, _f;
    var children = props.children, initialProps = props.initialProps;
    var locale = (_a = initialProps.locale) !== null && _a !== void 0 ? _a : enUS;
    var numberOfMonths = (_b = initialProps.numberOfMonths) !== null && _b !== void 0 ? _b : 1;
    var today = (_c = initialProps.today) !== null && _c !== void 0 ? _c : new Date();
    // Limit navigation
    var _g = parseFromToProps(initialProps), fromDate = _g.fromDate, toDate = _g.toDate;
    // Default caption layout. If calendar navigation is unlimited, it must be
    // always `buttons` â€“ as we cannot display infinite options in the dropdown.
    var captionLayout = (_d = initialProps.captionLayout) !== null && _d !== void 0 ? _d : 'buttons';
    if (!fromDate && !toDate)
        captionLayout = 'buttons';
    var modifiers = parseModifierProps(initialProps);
    // Disable days before/after from/toDate
    if (fromDate) {
        modifiers.disabled.push({ before: fromDate });
    }
    if (toDate) {
        modifiers.disabled.push({ after: toDate });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    initialProps.toYear; initialProps.fromYear; initialProps.toMonth; initialProps.fromMonth; var contextProps = __rest(initialProps, ["toYear", "fromYear", "toMonth", "fromMonth"]);
    var context = __assign(__assign({}, contextProps), { captionLayout: captionLayout, fromDate: fromDate, toDate: toDate, today: today, locale: locale, modifierClassNames: (_e = initialProps.modifierClassNames) !== null && _e !== void 0 ? _e : {}, modifierPrefix: 'rdp-day_', modifiers: modifiers, numberOfMonths: numberOfMonths, styles: (_f = initialProps.styles) !== null && _f !== void 0 ? _f : {}, classNames: __assign(__assign({}, defaultClassNames), initialProps.classNames), formatters: __assign(__assign({}, index), initialProps.formatters), labels: __assign(__assign({}, index$1), initialProps.labels), components: __assign({ Caption: Caption, CaptionLabel: CaptionLabel, Day: Day, DayContent: DayContent, Dropdown: Dropdown, Footer: Footer, Head: Head, IconDropdown: IconDropdown, IconRight: IconRight, IconLeft: IconLeft, Row: Row, WeekNumber: WeekNumber }, initialProps.components) });
    return (React.createElement(DayPickerContext.Provider, { value: context }, children));
}

export { DayPickerProvider };
//# sourceMappingURL=DayPickerProvider.js.map
