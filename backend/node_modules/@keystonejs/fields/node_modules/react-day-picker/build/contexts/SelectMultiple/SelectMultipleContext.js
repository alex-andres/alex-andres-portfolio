import { __spreadArray } from '../../_virtual/_tslib.js';
import React from 'react';
import { isSameDay } from 'date-fns';
import { isDayPickerMultiple } from '../../types/DayPickerMultiple.js';

/**
 * The SelectMultiple context shares details about the selected days when in
 * multiple selection mode.
 *
 * Access this context from the [[useSelectMultiple]] hook.
 */
var SelectMultipleContext = React.createContext(undefined);
/** Provides the values for the [[SelectMultipleContext]]. */
function SelectMultipleProvider(props) {
    if (!isDayPickerMultiple(props.initialProps)) {
        var emptyContextValue = {
            selected: undefined,
            modifiers: {
                selected: [],
                disabled: []
            }
        };
        return (React.createElement(SelectMultipleContext.Provider, { value: emptyContextValue }, props.children));
    }
    return (React.createElement(SelectMultipleProviderInternal, { initialProps: props.initialProps, children: props.children }));
}
function SelectMultipleProviderInternal(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var selected = initialProps.selected;
    var onDayClick = function (day, modifiers, e) {
        var _a, _b;
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, modifiers, e);
        var isMinSelected = Boolean(initialProps.min &&
            modifiers.selected &&
            selected &&
            selected.length === initialProps.min);
        if (isMinSelected) {
            return;
        }
        var isMaxSelected = Boolean(initialProps.max &&
            !modifiers.selected &&
            selected &&
            selected.length === initialProps.max);
        if (isMaxSelected) {
            return;
        }
        var days = selected ? __spreadArray([], selected, true) : [];
        if (modifiers.selected) {
            var index = days.findIndex(function (selectedDay) {
                return isSameDay(day, selectedDay);
            });
            days.splice(index, 1);
        }
        else {
            days.push(day);
        }
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, days, day, modifiers, e);
    };
    var modifiers = {
        selected: [],
        disabled: []
    };
    if (selected) {
        modifiers.selected = selected;
        modifiers.disabled = [
            function disableDay(day) {
                var isMaxSelected = initialProps.max &&
                    selected &&
                    selected.length > initialProps.max - 1;
                var isSelected = selected === null || selected === void 0 ? void 0 : selected.some(function (selectedDay) {
                    return isSameDay(selectedDay, day);
                });
                return Boolean(isMaxSelected && !isSelected);
            }
        ];
    }
    var contextValue = { selected: selected, onDayClick: onDayClick, modifiers: modifiers };
    return (React.createElement(SelectMultipleContext.Provider, { value: contextValue }, children));
}

export { SelectMultipleContext, SelectMultipleProvider, SelectMultipleProviderInternal };
//# sourceMappingURL=SelectMultipleContext.js.map
